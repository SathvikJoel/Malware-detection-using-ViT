import argparse
import os
from pathlib import Path

import numpy as np

import torch
import torchvision.datasets as datasets
import torchvision.transforms as transforms

from tqdm import tqdm

def get_args_parser():
    parser = argparse.ArgumentParser('Load data', add_help=False)
    parser.add_argument('--data_path', default='data', type=str)
    parser.add_argument('--batch_size', default=32, type=int)
    parser.add_argument('--num_workers', default=4, type=int)
    parser.add_argument('--pin_mem', default=True, type=bool)
    parser.add_argument('--input_size', default=224, type=int)
    return parser

def main(args):
    print('job dir : {}'.format(os.path.dirname(os.path.realpath(__file__))))
    transform_train = transforms.Compose([
            transforms.RandomResizedCrop(args.input_size, scale=(0.2, 1.0), interpolation=3),  # 3 is bicubic
            transforms.CenterCrop(args.input_size),
            transforms.RandomHorizontalFlip(),
            transforms.ToTensor(),
            transforms.Normalize( mean = [3.5465e-07, 1.7270e-01, 5.8806e-02], std= [1.4158e-04, 1.3526e-01, 1.4213e-01])
            ])
   
    
    dataset_train = datasets.ImageFolder(os.path.join(args.data_path, 'train'), transform=transform_train)
    sampler_train = torch.utils.data.RandomSampler(dataset_train)

    print('Classes')
    print(dataset_train.classes)

    print('Class to Index Mapping')
    print(dataset_train.class_to_idx)

    print(dataset_train)
    data_loader_train = torch.utils.data.DataLoader(
        dataset_train, sampler=sampler_train,
        batch_size=args.batch_size,
        num_workers=args.num_workers,
        pin_memory=args.pin_mem,
        drop_last=True,
    )

    print(len(data_loader_train.dataset.classes))

    # # get a batch of data
    # mean = torch.zeros(3)
    # std = torch.zeros(3)

    # pbar = tqdm(total=len(data_loader_train.dataset))
    # num_batches  = 0
    # for i, (images, labels) in enumerate(data_loader_train):
    #     mean += torch.mean(images, dim=(0, 2, 3))
    #     std += torch.std(images, dim=(0, 2, 3))
    #     # print('Batch: %d, mean: %s, std: %s' % (i, str(mean), str(std)))
    #     pbar.update(len(images))
    #     num_batches += 1

    # # mean = mean / len(data_loader_train.dataset)
    # mean = mean / num_batches 
    # std = std / num_batches
    # # std = torch.sqrt(std / len(data_loader_train.dataset) - mean**2)

    # print('mean: %s, std: %s' % (str(mean), str(std)))

if __name__ == '__main__':
    args = get_args_parser().parse_args()
    main(args)


